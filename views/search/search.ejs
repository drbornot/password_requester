<%- include('../partials/header'); -%>

<div class="search-container">
    <div class="messages-container">
        <!-- <div class="show-message">
            success fa-check-circle The Entry has been created successfully!
            warning fa-exclamation-triangle Some warning alert before any request!
            error fa-bug Something went wrong while you trying to create a new entry!
        </div> -->
    </div>
    <div class="forms-container">
        <button class="btn">
            <div>
                <i class="fa fa-plus"></i>
                <span class="wspan">Add</span>
            </div>
        </button>
        <div class="add-form-container invisible">
            <form>
                <div class="add-form-items">
                    <label for="acronym">Acronym</label>
                    <input type="text" name="acronym" >
                    <div class="acronym error"></div>

                    <label for="username">Username</label>
                    <input type="text" name="username"  autocomplete="off">
                    <div class="username error"></div>

                    <label for="password">Password</label>
                    <input type="password" name="password" autocomplete="off">
                    <div class="password error"></div>

                    <label for="website">Website</label>
                    <input type="text" name="website" >
                    <div class="website error"></div>

                    <button type="submit" class="btn">Add</button>
                    <button type="button" class="cancel">Cancel</button>
                </div>
            </form>
        </div>
        
        <div class="search-form-container">
            <form>
                <div class="search-input">
                    <input type="text" id="searchInput" class="searchInput" placeholder="Enter acronym">
                    <button type="submit" class="btn">Search</button>
                </div>
                <div class="load-spinner load-spinner-none">
                    <!-- <div class="la-pacman la-2x">
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                    </div> -->
                    <div class="la-ball-spin-clockwise la-2x">
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                    </div>

                </div>
                <div class="search-items">
                    
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal">
    <div class="modalContent">
        <p>Are you sure you want delete this entry?</p>
        <div>
            <button type="button" class="cancelDeleteEntry" onclick="hideModal()">Cancel</button>
            <button type="button" class="deleteEntry">Delete</button>
        </div>
    </div>
</div>

<script src="./js/frontend/front.js"></script>
<script>

    // search-container
    const searchContainer = document.querySelector(".search-container")
    
    // message container
    const messagesContainer = document.querySelector(".messages-container") 

    // forms containers
    const addFormContainer = document.querySelector(".add-form-container")
    const searchFormContainer = document.querySelector(".search-form-container")
    
    // forms
    const formSearchEntry = document.querySelector(".search-form-container form")
    const formAddEntry = document.querySelector(".add-form-container form")

    const searchInput = document.querySelector(".searchInput")
    const searchInputButton = document.querySelector(".search-input > button")

    const searchItems = document.querySelector(".search-items")
    const searchInnerDeleteButton = document.querySelector(".inner-delete-button")

    const load_spinner = document.querySelector(".load-spinner")

    const addFormButton = document.querySelector(".add-form-items > button.btn")
    const cancelAddFormButton = document.querySelector(".add-form-container .cancel")

    // toggle button to swith add/search forms
    const toggleButton = document.querySelector(".forms-container button")
    const iconButtonToggle = document.querySelector(".forms-container button i")
    const textButtonToggle = document.querySelector(".forms-container button span")
    let toggleDefault = true

    // modal container
    const modal = document.querySelector(".modal")
    const deleteEntryButton = document.querySelector(".deleteEntry")
    let entryItem

    //  **************  toggler button *********************************
    toggleButton.addEventListener("click", async (e) => {

        if(toggleDefault) {
            iconButtonToggle.classList.replace("fa-plus", "fa-search")
            textButtonToggle.textContent = "Search"
            searchFormContainer.classList.add("invisible")
            addFormContainer.classList.remove("invisible")
            removeSearchedItems(searchItems)
            cleanFormInputs()

            toggleDefault = false
        } else {
            iconButtonToggle.classList.replace("fa-search", "fa-plus")
            textButtonToggle.textContent = "Add"
            searchFormContainer.classList.remove("invisible")
            addFormContainer.classList.add("invisible")
            cleanFormInputs()

            toggleDefault = true
        }

        removeElementIfExistByQuerySelector(".show-message")
    })

    // ***************** modal handler ************************

    function hideModal() {
      modal.style.display = "none"
      entryItem = undefined
    }

    deleteEntryButton.addEventListener("click", async (e) => {
        deleteEntryButton.setAttribute("disabled", "disabled")
        await deleteEntry(entryItem)
            .then((entry) => {
                const elem = entryItem.closest(".search-inner")
                elem.remove()
            })
        deleteEntryButton.removeAttribute("disabled")
        hideModal()
        printMessage("Entry deleted successfully!", "success")
    })

    async function deleteEntry(elem) {
        let id = elem.dataset.identifier
        
        if(id) {
            try {
                const result = await fetch(`/entries/${id}`, {
                    method: "DELETE",
                    headers: {"Content-Type": "application/json"}
                })

                const data = await result.json()

                if (data.entry) {
                    return data.entry
                }
            } catch(err) {
                console.log(err)
            }
        }
    }

    // ****************** form search *******************

    formSearchEntry.addEventListener("submit", async (e) => {
        e.preventDefault()

        const searchInner = document.querySelectorAll(".search-inner")
        const searchNotFound = document.querySelector(".search-inner-not-found")
        
        if(searchInner.length) {
            searchInner.forEach(element => {
                element.remove()
            })
        }

        if(searchNotFound) {
            searchNotFound.remove()
        }

        let value = searchInput.value

        searchInputButton.setAttribute("disabled", "disabled")
        load_spinner.classList.remove("load-spinner-none")

        await searchByAcronym(value).then((result, error) => {
            if(error) {
                console.log(error)
            }

            if(result.length) {
                result.forEach(element => {
                    createSearchedItem(element) 
                })

                let collapsible = document.querySelectorAll('.search-inner li div i:not(.fa-trash-o), .search-inner li div span')
                let collapsibleDeleteButton = document.querySelectorAll('.search-inner li div i.fa-trash-o')
                let clipboardButtons = document.querySelectorAll(".copy-clipboard-button")
        
                if(collapsible.length) {
                    collapsibleItemsHandler(collapsible)
                    openDeleteModal(collapsibleDeleteButton)
                    copyClipboard(clipboardButtons)
                }
            } else {
                searchItems.insertAdjacentHTML("beforeend", `
                    <div class="search-inner-not-found">
                        <span>No records was found!</span>
                    </div>
                `)
            }
        })

        load_spinner.classList.add("load-spinner-none")
        searchInputButton.removeAttribute('disabled')         
    })

    let createSearchedItem = (data) => {
        searchItems.insertAdjacentHTML("beforeend", `
            <div class="search-inner">
                <li>
                    <div>
                        <i class="fa fa-angle-up"></i>
                        <span>Acronym: ${data.acronym}</span>
                        <button data-identifier="${data._id}" type="button" class="inner-delete-button">
                            <i class="fa fa-trash-o"></i>
                        </button>
                    </div>
                    <ul>
                        <li style="display: none;">
                            <label for="username_${data._id}">Username:</label>
                            <button class="copy-clipboard-button" type="button">
                                <input type="text" id="username_${data._id}" value="${data.username}" readonly>
                                <i class="fa fa-copy"></i>
                                <p></p>
                            </button>
                            
                        </li>
                        <li style="display: none;">
                            <label for="password_${data._id}">Password:</label>
                            <button class="copy-clipboard-button" type="button">
                                <input type="password" id="password_${data._id}" value="This is a mimic password!" readonly>
                                <i class="fa fa-copy"></i>
                                <p></p>
                            </button>
                        </li>
                        <li style="display: none;">
                            <label for="website_${data._id}">Website:</label>
                            <input type="text" id="website_${data._id}" value="${data.website}" readonly>
                        </li>
                    </ul>
                </li>
            </div>
        `)
    }

    let searchByAcronym = async (value) => {

        let data = []

        try {
            if(value) {
                const result = await fetch(`/entries/acronym/${value}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                })

                data = await result.json()
            } else {
                const result = await fetch(`/entries`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                })

                data = await result.json()
            }
            
            return data.entries

        } catch (error) {
            console.log(`Emitted error: ${error}`)
        }
    }

    let collapsibleItemsHandler = (collapsible) => {
        collapsible.forEach(function (item) {
            
            item.onclick = function () {
                
                if (collapsible.length > 1) {
                    collapsible.forEach((collItem) => {
                        if(! collItem.parentNode.isSameNode(this.parentNode)) {
                            const childList = collItem.closest("li").getElementsByTagName("li")
                            const icon = collItem.parentNode.querySelector("i:not(.fa-trash-o)")
                            for (let li of childList) {
                                if (li.style.display == "block") {
                                    icon.classList.replace("fa-angle-down", "fa-angle-up")
                                    
                                    li.style.display = "none"
                                }
                            }
                        }
                    })
                }
                
                const childList = this.closest("li").getElementsByTagName("li")
                const icon = this.parentNode.querySelector("i:not(.fa-trash-o)")
                for (let li of childList) {
                    var currentState = li.style.display

                    if (currentState == "none") {
                        icon.classList.replace("fa-angle-up", "fa-angle-down")
                        li.classList.remove("opacityOut")
                        li.classList.add("opacityIn")
                        li.style.display = "block"
                    }
                    else {
                        icon.classList.replace("fa-angle-down", "fa-angle-up")
                        li.classList.remove("opacityIn")
                        li.classList.add("opacityOut")
                        li.style.display = "none"
                    }
                }                
            }
        })
    }

    let openDeleteModal = (collapsibleDelButtons) => {
        collapsibleDelButtons.forEach((item) => {

            item.onclick = function () {
                modal.style.display = "block"
                entryItem = this.parentNode
            }
        })
    }
    
    let copyClipboard = function (clipboards) {
        
        clipboards.forEach((item) => {

            item.onclick = async function () {
                let input = this.firstElementChild
                let attr = input.getAttribute("id")
                let joined = attr.split("_")
                const id = joined[1]

                if (input.getAttribute("type") == "text") {
                    await copyRichText(input.value)
                } else if (input.getAttribute("type") == "password") {
                    const result = await fetchPwd(id)
                    const data = await result.json()
                    await copyRichText(data.password)
                }

                let p = this.querySelector("p")
                p.innerHTML = "Copied!"
                p.style.display = "block"

                setTimeout(() => {
                    p.innerHTML = ""
                    p.style.display = "none"
                }, 1000)
            }

        })
    }

    async function fetchPwd(id) {
        return await fetch(`/entries/pwd/${id}`, {
            method: "GET",
            headers: {"Content-Type": "application/json"},
        })
    }

    // ******************* form add *********************

    formAddEntry.addEventListener("submit", async (e) => {
        e.preventDefault()

        let acronym = formAddEntry.acronym
        let username = formAddEntry.username
        let password = formAddEntry.password
        let website = formAddEntry.website

        let emptyValues = checkIfEmptiesValues(acronym.value, username.value, password.value)

        if (emptyValues.length) {
            let print = emptyValues.length > 1 ? emptyValues.join(", ") + " values" : emptyValues[0] + " value"
            printMessage(`Provide ${print} to proceed`, "warning")
        } else {
            addFormButton.setAttribute("disabled", "disabled")
            await addEntry(acronym.value, username.value, password.value, website.value)
            addFormButton.removeAttribute("disabled")
        }
    })

    let addEntry = async (acronym, username, password, website) => {
        
        try {
            const result = await fetch("/entries", {
                method: 'POST',
                headers: { 'Content-Type':'application/json' },
                body: JSON.stringify({ acronym, username, password, website })                
            })

            const data = await result.json()

            if (data.error) {
                printMessage("Something went wrong while you trying to create a new entry!", "error")   
            } else {
                printMessage("The Entry has been created successfully!", "success")
                cleanFormInputs()
            }
        } catch (error) {
            console.log(`Emitted error: ${error}`)
        }

    }
    
    // ******************* utils ************************
    
    cancelAddFormButton.addEventListener("click", () => {
        cleanFormInputs()
    })

    messagesContainer.addEventListener("click", (e) => {
        if (e.target && e.target.tagName === "I" && e.target.classList.contains("fa-times")) {
            removeElementIfExistByQuerySelector(".show-message")
        }
    })

    let cleanFormInputs = function() {
        let acronym = formAddEntry.acronym
        let username = formAddEntry.username
        let password = formAddEntry.password
        let website = formAddEntry.website

        acronym.value = ""
        username.value = ""
        password.value = ""
        website.value = ""
        searchInput.value = ""
    }

    let printMessage = (message, flag) => {
        const item = message_item(message, flag)
        messagesContainer.insertAdjacentHTML("beforeend", item)
    }
    
    // ******************** load and ready ******************

    window.onload = () => {
        cleanFormInputs()
    }

    window.onclick = function(event) {
        if (event.target == modal) {
            hideModal()
        }
    }
</script>

<%- include('../partials/footer'); -%>